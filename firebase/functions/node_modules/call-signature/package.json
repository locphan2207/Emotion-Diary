{
  "_args": [
    [
      {
        "raw": "call-signature@0.0.2",
        "scope": null,
        "escapedName": "call-signature",
        "name": "call-signature",
        "rawSpec": "0.0.2",
        "spec": "0.0.2",
        "type": "version"
      },
      "/Users/kimvibui/Documents/Loc/EmotionDiary/firebase/functions/node_modules/empower-core"
    ]
  ],
  "_from": "call-signature@0.0.2",
  "_id": "call-signature@0.0.2",
  "_inCache": true,
  "_location": "/call-signature",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "twada",
    "email": "takuto.wada@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "call-signature@0.0.2",
    "scope": null,
    "escapedName": "call-signature",
    "name": "call-signature",
    "rawSpec": "0.0.2",
    "spec": "0.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/empower-core"
  ],
  "_resolved": "https://registry.npmjs.org/call-signature/-/call-signature-0.0.2.tgz",
  "_shasum": "a84abc825a55ef4cb2b028bd74e205a65b9a4996",
  "_shrinkwrap": null,
  "_spec": "call-signature@0.0.2",
  "_where": "/Users/kimvibui/Documents/Loc/EmotionDiary/firebase/functions/node_modules/empower-core",
  "author": {
    "name": "James Talmage",
    "email": "james@talmage.io",
    "url": "github.com/jamestalmage"
  },
  "bugs": {
    "url": "https://github.com/jamestalmage/call-signature/issues"
  },
  "dependencies": {},
  "description": "Parse / Generate Method Signatures",
  "devDependencies": {
    "ava": "^0.5.0",
    "xo": "^0.11.2"
  },
  "directories": {},
  "dist": {
    "shasum": "a84abc825a55ef4cb2b028bd74e205a65b9a4996",
    "tarball": "https://registry.npmjs.org/call-signature/-/call-signature-0.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "df5278d361778c37824256ed5a3abc63e40a9759",
  "homepage": "https://github.com/jamestalmage/call-signature#readme",
  "keywords": [],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jamestalmage",
      "email": "james@talmage.io"
    },
    {
      "name": "twada",
      "email": "takuto.wada@gmail.com"
    }
  ],
  "name": "call-signature",
  "optionalDependencies": {},
  "readme": "# call-signature [![Build Status](https://travis-ci.org/jamestalmage/call-signature.svg?branch=master)](https://travis-ci.org/jamestalmage/call-signature)\n\n> Parse / Generate Method Signatures\n\n\n## Install\n\n```\n$ npm install --save call-signature\n```\n\n\n## Usage\n\n```js\nvar signature = require('call-signature');\n\n// parse a call signature definition\nvar parsed = signature.parse('t.equal(expected, actual, [message])');\n\nconsole.log(parsed);\n/* =>  \n       {\n         callee: {\n           type: 'MemberExpression',\n           object: 't',\n           member: 'equal'\n         },\n         args: [\n           {\n             name: 'actual',\n             optional: false\n           },\n           {\n             name: 'expected',\n             optional: false\n           },\n           {\n             name: 'message',\n             optional: true\n           }\n         ]\n       }\n*/\n\n\n// Create signature definitions from the parsed object.\nsignature.generate(parsed);\n\n//=> \"t.equal(expected, actual, [message])\"\n```\n\n\n## API\n\n### callSignature.parse(input)\n\n#### input\n\nType: `string`\n\nA string that matches the call signature spec:\n\n`object.member(required_arg1, required_arg2, [optional_arg1])`\n`name(required_arg1, required_arg2, [optional_arg1])`\n\n`object`, `member` and `name` can be any identifiers, but currently the callee must be a `MemberExpression` or an `Identifier` (that requirement may loosen in the future).\n \nYou can have any number of arguments. Optional arguments are denoted by placing the argument name between square `[`brackets`]`.\n\n#### returns\n\nA simple JS Object with three properties `callee` and `args`.\n\n`callee` will be an object containing `type` property and its corresponding properties.\n\nwhen matched against `MemberExpression` like `foo.bar(baz)`, `object` and `member` will be strings.\n\n    callee: {\n      type: 'MemberExpression',\n      object: 'foo',\n      member: 'bar'\n    }\n\nwhen matched against `Identifier` like `foo(baz)`, `name` will be string.\n\n    callee: {\n      type: 'Identifier',\n      name: 'foo'\n    }\n\n`args` will be an array. Each item of the array will have two properties `name`, and `optional`. \n `name` will be the `string` name of the arg. `optional` will be a boolean value.\n\n### callSignature.generate(parsed)\n\n#### input\n\nType: `Object`\n\nMust have the same definition as the return value from the `parse` method.\n\n#### returns\n\nA `string` signature definition that will parse to exactly the provided input.\n\n## Related\n\n- [escallmatch](https://www.npmjs.com/package/escallmatch) - Similar, with compatible string definitions to this library. Can be used to match AST Nodes to parsed signatures.\n\n## License\n\nMIT Â© [James Talmage](http://github.com/jamestalmage)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jamestalmage/call-signature.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "0.0.2",
  "xo": {
    "ignores": [
      "test.js"
    ]
  }
}
