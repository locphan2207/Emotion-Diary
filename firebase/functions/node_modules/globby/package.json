{
  "_args": [
    [
      {
        "raw": "globby@^7.1.1",
        "scope": null,
        "escapedName": "globby",
        "name": "globby",
        "rawSpec": "^7.1.1",
        "spec": ">=7.1.1 <8.0.0",
        "type": "range"
      },
      "/Users/kimvibui/Documents/Loc/EmotionDiary/firebase/functions/node_modules/google-gax"
    ]
  ],
  "_from": "globby@>=7.1.1 <8.0.0",
  "_id": "globby@7.1.1",
  "_inCache": true,
  "_location": "/globby",
  "_nodeVersion": "4.8.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/globby-7.1.1.tgz_1511088613172_0.09194997837767005"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "globby@^7.1.1",
    "scope": null,
    "escapedName": "globby",
    "name": "globby",
    "rawSpec": "^7.1.1",
    "spec": ">=7.1.1 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/google-gax",
    "/google-proto-files"
  ],
  "_resolved": "https://registry.npmjs.org/globby/-/globby-7.1.1.tgz",
  "_shasum": "fb2ccff9401f8600945dfada97440cca972b8680",
  "_shrinkwrap": null,
  "_spec": "globby@^7.1.1",
  "_where": "/Users/kimvibui/Documents/Loc/EmotionDiary/firebase/functions/node_modules/google-gax",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/globby/issues"
  },
  "dependencies": {
    "array-union": "^1.0.1",
    "dir-glob": "^2.0.0",
    "glob": "^7.1.2",
    "ignore": "^3.3.5",
    "pify": "^3.0.0",
    "slash": "^1.0.0"
  },
  "description": "Extends `glob` with support for multiple patterns and exposes a Promise API",
  "devDependencies": {
    "ava": "*",
    "fast-glob": "^1.0.1",
    "glob-stream": "^6.1.0",
    "globby": "github:sindresorhus/globby#master",
    "matcha": "^0.7.0",
    "rimraf": "^2.2.8",
    "xo": "^0.18.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fb2ccff9401f8600945dfada97440cca972b8680",
    "tarball": "https://registry.npmjs.org/globby/-/globby-7.1.1.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js",
    "gitignore.js"
  ],
  "gitHead": "9bf9983bca42c2176657a2084608bd6fca417258",
  "homepage": "https://github.com/sindresorhus/globby#readme",
  "keywords": [
    "all",
    "array",
    "directories",
    "dirs",
    "expand",
    "files",
    "filesystem",
    "filter",
    "find",
    "fnmatch",
    "folders",
    "fs",
    "glob",
    "globbing",
    "globs",
    "gulpfriendly",
    "match",
    "matcher",
    "minimatch",
    "multi",
    "multiple",
    "paths",
    "pattern",
    "patterns",
    "traverse",
    "util",
    "utility",
    "wildcard",
    "wildcards",
    "promise",
    "gitignore",
    "git"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "schnittstabil",
      "email": "michael@schnittstabil.de"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "ult_combo",
      "email": "ultcombo@gmail.com"
    }
  ],
  "name": "globby",
  "optionalDependencies": {},
  "readme": "# globby [![Build Status](https://travis-ci.org/sindresorhus/globby.svg?branch=master)](https://travis-ci.org/sindresorhus/globby)\n\n> User-friendly glob matching\n\nBased on [`glob`](https://github.com/isaacs/node-glob), but adds a bunch of useful features and a nicer API.\n\n\n## Features\n\n- Promise API\n- Multiple patterns\n- Negated patterns: `['foo*', '!foobar']`\n- Expands directories: `dir` → `dir/**/*`\n- Supports `.gitignore`\n\n\n## Install\n\n```\n$ npm install globby\n```\n\n\n## Usage\n\n```\n├── unicorn\n├── cake\n└── rainbow\n```\n\n```js\nconst globby = require('globby');\n\n(async () => {\n\tconst paths = await globby(['*', '!cake']);\n\n\tconsole.log(paths);\n\t//=> ['unicorn', 'rainbow']\n})();\n```\n\n\n## API\n\n### globby(patterns, [options])\n\nReturns a `Promise<Array>` of matching paths.\n\n#### patterns\n\nType: `string` `Array`\n\nSee supported `minimatch` [patterns](https://github.com/isaacs/minimatch#usage).\n\n#### options\n\nType: `Object`\n\nSee the [`node-glob` options](https://github.com/isaacs/node-glob#options) in addition to the ones below.\n\nOne difference is that `nodir` is `true` by default here.\n\n##### expandDirectories\n\nType: `boolean` `Array` `Object`<br>\nDefault: `true`\n\nIf set to `true`, `globby` will automatically glob directories for you. If you define an `Array` it will only glob files that matches the patterns inside the `Array`. You can also define an `Object` with `files` and `extensions` like below:\n\n```js\n(async () => {\n\tconst paths = await globby('images', {\n\t\texpandDirectories: {\n\t\t\tfiles: ['cat', 'unicorn', '*.jpg'],\n\t\t\textensions: ['png']\n\t\t}\n\t});\n\n\tconsole.log(paths);\n\t//=> ['cat.png', 'unicorn.png', 'cow.jpg', 'rainbow.jpg']\n})();\n```\n\nNote that if you set this option to `false`, you won't get back matched directories unless you set `nodir: false`.\n\n##### gitignore\n\nType: `boolean`<br>\nDefault: `false`\n\nRespect ignore patterns in `.gitignore` files that apply to the globbed files.\n\n### globby.sync(patterns, [options])\n\nReturns an `Array` of matching paths.\n\n### globby.generateGlobTasks(patterns, [options])\n\nReturns an `Array<Object>` in the format `{pattern: string, opts: Object}`, which can be passed as arguments to [`node-glob`](https://github.com/isaacs/node-glob). This is useful for other globbing-related packages.\n\nNote that you should avoid running the same tasks multiple times as they contain a file system cache. Instead, run this method each time to ensure file system changes are taken into consideration.\n\n### globby.hasMagic(patterns, [options])\n\nReturns a `boolean` of whether there are any special glob characters in the `patterns`.\n\nNote that the options affect the results. If `noext: true` is set, then `+(a|b)` will not be considered a magic pattern. If the pattern has a brace expansion, like `a/{b/c,x/y}`, then that is considered magical, unless `nobrace: true` is set.\n\n### globby.gitignore([options])\n\nReturns a `Promise<(path: string) => boolean>` indicating wether a given path is ignored via a `.gitignore` file.\n\nTakes `cwd?: string` and `ignore?: string[]` as options. `.gitignore` files matched by the ignore config are not\nused for the resulting filter function.\n\n```js\nconst {gitignore} = require('globby');\n\n(async () => {\n\tconst isIgnored = await gitignore();\n\tconsole.log(isIgnored('some/file'));\n})();\n```\n\n### globby.gitignore.sync([options])\n\nReturns a `(path: string) => boolean` indicating wether a given path is ignored via a `.gitignore` file.\n\nTakes the same options as `globby.gitignore`.\n\n\n## Globbing patterns\n\nJust a quick overview.\n\n- `*` matches any number of characters, but not `/`\n- `?` matches a single character, but not `/`\n- `**` matches any number of characters, including `/`, as long as it's the only thing in a path part\n- `{}` allows for a comma-separated list of \"or\" expressions\n- `!` at the beginning of a pattern will negate the match\n\n[Various patterns and expected matches.](https://github.com/sindresorhus/multimatch/blob/master/test/test.js)\n\n\n## Related\n\n- [multimatch](https://github.com/sindresorhus/multimatch) - Match against a list instead of the filesystem\n- [matcher](https://github.com/sindresorhus/matcher) - Simple wildcard matching\n- [del](https://github.com/sindresorhus/del) - Delete files and directories\n- [make-dir](https://github.com/sindresorhus/make-dir) - Make a directory and its parents if needed\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/globby.git"
  },
  "scripts": {
    "bench": "npm update glob-stream fast-glob && matcha bench.js",
    "test": "xo && ava"
  },
  "version": "7.1.1"
}
